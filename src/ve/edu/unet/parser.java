
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ve.edu.unet;

import java_cup.runtime.*;
import ve.edu.unet.nodosAST.*;
import java.io.InputStreamReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\015\004\000\002\015\003" +
    "\000\002\014\005\000\002\014\010\000\002\014\005\000" +
    "\002\014\010\000\002\004\004\000\002\004\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\006\007\000\002\006\011\000\002\007\006\000\002" +
    "\013\013\000\002\010\005\000\002\010\010\000\002\011" +
    "\004\000\002\011\007\000\002\012\004\000\002\016\005" +
    "\000\002\016\005\000\002\016\004\000\002\016\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\003" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\022\003\000\002" +
    "\022\003\000\002\022\006\000\002\022\003\000\002\022" +
    "\003\000\002\024\004\000\002\024\003\000\002\023\011" +
    "\000\002\023\010\000\002\025\003\000\002\026\006\000" +
    "\002\026\006\000\002\026\004\000\002\026\004\000\002" +
    "\027\004\000\002\030\006\000\002\030\005\000\002\031" +
    "\003\000\002\032\005\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\030\003\023\004\012\010\032\012\005\013" +
    "\015\014\016\034\006\035\026\040\031\047\021\050\007" +
    "\001\002\000\004\033\230\001\002\000\004\014\224\001" +
    "\002\000\004\014\216\001\002\000\014\003\046\014\045" +
    "\015\042\031\053\046\052\001\002\000\004\033\214\001" +
    "\002\000\004\002\001\001\002\000\014\003\046\014\045" +
    "\015\042\031\053\046\052\001\002\000\030\003\023\004" +
    "\012\010\032\012\005\013\015\014\016\034\006\035\026" +
    "\040\031\047\021\050\007\001\002\000\004\002\202\001" +
    "\002\000\014\003\046\014\045\015\042\031\053\046\052" +
    "\001\002\000\010\016\137\031\112\036\136\001\002\000" +
    "\004\033\200\001\002\000\004\033\177\001\002\000\004" +
    "\014\154\001\002\000\030\002\uffff\003\023\004\012\007" +
    "\uffff\010\032\012\005\013\015\014\016\040\031\047\021" +
    "\050\007\001\002\000\034\002\uffec\003\uffec\004\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\040\uffec\047\uffec\050\uffec\001\002\000\034\002\ufff5\003" +
    "\ufff5\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\040\ufff5\047\ufff5\050\ufff5\001\002\000" +
    "\034\002\uffef\003\uffef\004\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\040\uffef\047\uffef\050" +
    "\uffef\001\002\000\004\014\146\001\002\000\034\002\ufff0" +
    "\003\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\040\ufff0\047\ufff0\050\ufff0\001\002" +
    "\000\004\033\145\001\002\000\004\014\125\001\002\000" +
    "\024\003\023\004\012\010\032\012\005\013\015\014\016" +
    "\040\031\047\021\050\007\001\002\000\030\003\ufffc\004" +
    "\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\034\ufffc\035\ufffc" +
    "\040\ufffc\047\ufffc\050\ufffc\001\002\000\004\033\036\001" +
    "\002\000\034\002\ufff6\003\ufff6\004\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\040\ufff6\047" +
    "\ufff6\050\ufff6\001\002\000\034\002\ufff3\003\ufff3\004\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\040\ufff3\047\ufff3\050\ufff3\001\002\000\026\003\023" +
    "\004\012\010\032\011\040\012\005\013\015\014\016\040" +
    "\031\047\021\050\007\001\002\000\014\003\046\014\045" +
    "\015\042\031\053\046\052\001\002\000\034\002\ufff7\003" +
    "\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\040\ufff7\047\ufff7\050\ufff7\001\002\000" +
    "\050\005\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\032\uffcf\033" +
    "\uffcf\037\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\001\002\000\050\005\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\101\030\100" +
    "\032\uffd5\033\uffd5\037\uffd5\041\uffd5\042\uffd5\043\077\044" +
    "\uffd5\045\uffd5\001\002\000\004\033\uffe9\001\002\000\054" +
    "\005\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\112\032\uffce" +
    "\033\uffce\036\113\037\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\001\002\000\050\005\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\032\uffcb\033\uffcb\037\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\001\002\000\050\005\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\037\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\001\002\000\050" +
    "\005\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\033\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\001" +
    "\002\000\042\005\uffd8\017\065\020\064\021\066\022\070" +
    "\023\072\024\073\025\067\026\071\032\uffd8\033\uffd8\037" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\001\002\000\012" +
    "\003\046\014\045\015\042\031\053\001\002\000\014\003" +
    "\046\014\045\015\042\031\053\046\052\001\002\000\022" +
    "\005\uffdf\032\uffdf\033\uffdf\037\uffdf\041\uffdf\042\uffdf\044" +
    "\055\045\056\001\002\000\012\003\046\014\045\015\042" +
    "\031\053\001\002\000\012\003\046\014\045\015\042\031" +
    "\053\001\002\000\016\005\uffe1\032\uffe1\033\uffe1\037\uffe1" +
    "\041\uffe1\042\uffe1\001\002\000\016\005\uffe2\032\uffe2\033" +
    "\uffe2\037\uffe2\041\uffe2\042\uffe2\001\002\000\004\032\062" +
    "\001\002\000\050\005\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\032\uffd0\033\uffd0\037\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\001\002\000\016\005\uffe0\032\uffe0\033\uffe0" +
    "\037\uffe0\041\uffe0\042\uffe0\001\002\000\012\003\046\014" +
    "\045\015\042\031\053\001\002\000\012\003\046\014\045" +
    "\015\042\031\053\001\002\000\012\003\046\014\045\015" +
    "\042\031\053\001\002\000\012\003\046\014\045\015\042" +
    "\031\053\001\002\000\012\003\046\014\045\015\042\031" +
    "\053\001\002\000\012\003\046\014\045\015\042\031\053" +
    "\001\002\000\012\003\046\014\045\015\042\031\053\001" +
    "\002\000\012\003\046\014\045\015\042\031\053\001\002" +
    "\000\026\005\uffd9\025\067\026\071\032\uffd9\033\uffd9\037" +
    "\uffd9\041\uffd9\042\uffd9\044\uffd9\045\uffd9\001\002\000\026" +
    "\005\uffda\025\067\026\071\032\uffda\033\uffda\037\uffda\041" +
    "\uffda\042\uffda\044\uffda\045\uffda\001\002\000\050\005\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\101\030\100\032\uffd6\033\uffd6\037\uffd6" +
    "\041\uffd6\042\uffd6\043\077\044\uffd6\045\uffd6\001\002\000" +
    "\012\003\046\014\045\015\042\031\053\001\002\000\012" +
    "\003\046\014\045\015\042\031\053\001\002\000\012\003" +
    "\046\014\045\015\042\031\053\001\002\000\050\005\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\037\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\001\002\000" +
    "\050\005\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\032\uffd3\033" +
    "\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\001\002\000\050\005\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\032\uffd2\033\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\001\002\000\026\005\uffdb\025\067\026\071" +
    "\032\uffdb\033\uffdb\037\uffdb\041\uffdb\042\uffdb\044\uffdb\045" +
    "\uffdb\001\002\000\050\005\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\101\030" +
    "\100\032\uffd7\033\uffd7\037\uffd7\041\uffd7\042\uffd7\043\077" +
    "\044\uffd7\045\uffd7\001\002\000\026\005\uffdc\025\067\026" +
    "\071\032\uffdc\033\uffdc\037\uffdc\041\uffdc\042\uffdc\044\uffdc" +
    "\045\uffdc\001\002\000\026\005\uffdd\025\067\026\071\032" +
    "\uffdd\033\uffdd\037\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd" +
    "\001\002\000\026\005\uffde\025\067\026\071\032\uffde\033" +
    "\uffde\037\uffde\041\uffde\042\uffde\044\uffde\045\uffde\001\002" +
    "\000\016\003\046\014\045\015\042\031\053\032\120\046" +
    "\052\001\002\000\014\003\046\014\045\015\042\031\053" +
    "\046\052\001\002\000\004\037\115\001\002\000\050\005" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\037" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\001\002" +
    "\000\006\032\uffbc\042\uffbc\001\002\000\004\032\124\001" +
    "\002\000\050\005\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\032" +
    "\uffbf\033\uffbf\037\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\001\002\000\006\032\uffbe\042\122\001\002\000" +
    "\014\003\046\014\045\015\042\031\053\046\052\001\002" +
    "\000\006\032\uffbd\042\uffbd\001\002\000\050\005\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\032\uffc0\033\uffc0\037\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\001\002\000\006" +
    "\016\137\036\136\001\002\000\004\042\127\001\002\000" +
    "\014\003\046\014\045\015\042\031\053\046\052\001\002" +
    "\000\004\042\131\001\002\000\004\014\125\001\002\000" +
    "\004\041\133\001\002\000\024\003\023\004\012\010\032" +
    "\012\005\013\015\014\016\040\031\047\021\050\007\001" +
    "\002\000\026\003\023\004\012\007\135\010\032\012\005" +
    "\013\015\014\016\040\031\047\021\050\007\001\002\000" +
    "\034\002\uffe8\003\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\040\uffe8\047\uffe8\050" +
    "\uffe8\001\002\000\014\003\046\014\045\015\042\031\053" +
    "\046\052\001\002\000\014\003\046\014\045\015\042\031" +
    "\053\046\052\001\002\000\010\033\uffe7\041\uffe7\042\uffe7" +
    "\001\002\000\004\037\142\001\002\000\004\016\143\001" +
    "\002\000\014\003\046\014\045\015\042\031\053\046\052" +
    "\001\002\000\010\033\uffe6\041\uffe6\042\uffe6\001\002\000" +
    "\034\002\ufff1\003\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\040\ufff1\047\ufff1\050" +
    "\ufff1\001\002\000\006\033\147\036\150\001\002\000\030" +
    "\003\ufff9\004\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\034" +
    "\ufff9\035\ufff9\040\ufff9\047\ufff9\050\ufff9\001\002\000\004" +
    "\015\151\001\002\000\004\037\152\001\002\000\004\033" +
    "\153\001\002\000\030\003\ufff8\004\ufff8\010\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\034\ufff8\035\ufff8\040\ufff8\047\ufff8\050" +
    "\ufff8\001\002\000\004\031\155\001\002\000\010\032\160" +
    "\034\162\035\161\001\002\000\006\032\uffc6\042\172\001" +
    "\002\000\004\032\167\001\002\000\030\003\023\004\012" +
    "\010\032\012\005\013\015\014\016\034\006\035\026\040" +
    "\031\047\021\050\007\001\002\000\004\014\164\001\002" +
    "\000\004\014\163\001\002\000\006\032\uffc3\042\uffc3\001" +
    "\002\000\006\032\uffc2\042\uffc2\001\002\000\004\007\166" +
    "\001\002\000\034\002\uffc7\003\uffc7\004\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\040\uffc7" +
    "\047\uffc7\050\uffc7\001\002\000\030\003\023\004\012\010" +
    "\032\012\005\013\015\014\016\034\006\035\026\040\031" +
    "\047\021\050\007\001\002\000\004\007\171\001\002\000" +
    "\034\002\uffc8\003\uffc8\004\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\040\uffc8\047\uffc8\050" +
    "\uffc8\001\002\000\006\034\174\035\173\001\002\000\004" +
    "\014\176\001\002\000\004\014\175\001\002\000\006\032" +
    "\uffc5\042\uffc5\001\002\000\006\032\uffc4\042\uffc4\001\002" +
    "\000\034\002\uffee\003\uffee\004\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\040\uffee\047\uffee" +
    "\050\uffee\001\002\000\034\002\uffed\003\uffed\004\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\040\uffed\047\uffed\050\uffed\001\002\000\004\033\uffe3\001" +
    "\002\000\004\002\000\001\002\000\030\002\ufffe\003\023" +
    "\004\012\007\ufffe\010\032\012\005\013\015\014\016\040" +
    "\031\047\021\050\007\001\002\000\030\003\ufffd\004\ufffd" +
    "\010\ufffd\012\ufffd\013\ufffd\014\ufffd\034\ufffd\035\ufffd\040" +
    "\ufffd\047\ufffd\050\ufffd\001\002\000\004\005\206\001\002" +
    "\000\024\003\023\004\012\010\032\012\005\013\015\014" +
    "\016\040\031\047\021\050\007\001\002\000\030\003\023" +
    "\004\012\006\210\007\211\010\032\012\005\013\015\014" +
    "\016\040\031\047\021\050\007\001\002\000\024\003\023" +
    "\004\012\010\032\012\005\013\015\014\016\040\031\047" +
    "\021\050\007\001\002\000\034\002\uffeb\003\uffeb\004\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\040\uffeb\047\uffeb\050\uffeb\001\002\000\026\003\023" +
    "\004\012\007\213\010\032\012\005\013\015\014\016\040" +
    "\031\047\021\050\007\001\002\000\034\002\uffea\003\uffea" +
    "\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\040\uffea\047\uffea\050\uffea\001\002\000\034" +
    "\002\ufff2\003\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\040\ufff2\047\ufff2\050\ufff2" +
    "\001\002\000\004\033\uffc1\001\002\000\006\033\217\036" +
    "\220\001\002\000\030\003\ufffb\004\ufffb\010\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\034\ufffb\035\ufffb\040\ufffb\047\ufffb\050" +
    "\ufffb\001\002\000\004\015\221\001\002\000\004\037\222" +
    "\001\002\000\004\033\223\001\002\000\030\003\ufffa\004" +
    "\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\034\ufffa\035\ufffa" +
    "\040\ufffa\047\ufffa\050\ufffa\001\002\000\006\033\uffe5\036" +
    "\225\001\002\000\014\003\046\014\045\015\042\031\053" +
    "\046\052\001\002\000\004\037\227\001\002\000\004\033" +
    "\uffe4\001\002\000\034\002\ufff4\003\ufff4\004\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\040" +
    "\ufff4\047\ufff4\050\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\040\002\013\003\010\004\021\005\034\006" +
    "\023\007\003\010\033\011\007\012\027\013\026\014\032" +
    "\015\012\023\024\027\017\030\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\214" +
    "\017\053\020\050\021\042\022\046\030\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\204\017\053" +
    "\020\050\021\042\022\046\030\047\001\001\000\032\004" +
    "\202\005\034\006\023\007\003\010\033\011\007\012\027" +
    "\013\026\014\203\023\024\027\017\030\016\001\001\000" +
    "\002\001\001\000\016\016\200\017\053\020\050\021\042" +
    "\022\046\030\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\040" +
    "\006\023\007\003\010\033\011\007\012\027\013\026\023" +
    "\024\027\017\030\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\125\001\001\000\030" +
    "\004\036\005\034\006\023\007\003\010\033\011\007\012" +
    "\027\013\026\023\024\027\017\030\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\040\006\023\007\003\010\033\011\007" +
    "\012\027\013\026\023\024\027\017\030\016\001\001\000" +
    "\016\016\043\017\053\020\050\021\042\022\046\030\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\062\020\050\021\042\022\046\030\047\001\001" +
    "\000\016\016\060\017\053\020\050\021\042\022\046\030" +
    "\047\001\001\000\002\001\001\000\014\017\057\020\050" +
    "\021\042\022\046\030\047\001\001\000\014\017\056\020" +
    "\050\021\042\022\046\030\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\110\021\042\022\046\030\047" +
    "\001\001\000\012\020\107\021\042\022\046\030\047\001" +
    "\001\000\012\020\106\021\042\022\046\030\047\001\001" +
    "\000\010\021\105\022\046\030\047\001\001\000\012\020" +
    "\104\021\042\022\046\030\047\001\001\000\010\021\075" +
    "\022\046\030\047\001\001\000\012\020\074\021\042\022" +
    "\046\030\047\001\001\000\012\020\073\021\042\022\046" +
    "\030\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\103\030\047\001\001\000\006" +
    "\022\102\030\047\001\001\000\006\022\101\030\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\115\017\053" +
    "\020\050\021\042\022\046\030\047\031\116\032\120\001" +
    "\001\000\016\016\113\017\053\020\050\021\042\022\046" +
    "\030\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\122\017\053\020\050\021\042\022" +
    "\046\030\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\127\017" +
    "\053\020\050\021\042\022\046\030\047\001\001\000\002" +
    "\001\001\000\004\010\131\001\001\000\002\001\001\000" +
    "\030\004\133\005\034\006\023\007\003\010\033\011\007" +
    "\012\027\013\026\023\024\027\017\030\016\001\001\000" +
    "\026\005\040\006\023\007\003\010\033\011\007\012\027" +
    "\013\026\023\024\027\017\030\016\001\001\000\002\001" +
    "\001\000\016\016\140\017\053\020\050\021\042\022\046" +
    "\030\047\001\001\000\016\016\137\017\053\020\050\021" +
    "\042\022\046\030\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\143\017\053\020" +
    "\050\021\042\022\046\030\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\156\026\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\164" +
    "\004\021\005\034\006\023\007\003\010\033\011\007\012" +
    "\027\013\026\014\032\015\012\023\024\027\017\030\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\167\004\021\005\034\006\023\007\003\010" +
    "\033\011\007\012\027\013\026\014\032\015\012\023\024" +
    "\027\017\030\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\040\006\023\007\003\010\033\011\007\012\027\013" +
    "\026\023\024\027\017\030\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\206\005\034\006\023\007" +
    "\003\010\033\011\007\012\027\013\026\023\024\027\017" +
    "\030\016\001\001\000\026\005\040\006\023\007\003\010" +
    "\033\011\007\012\027\013\026\023\024\027\017\030\016" +
    "\001\001\000\030\004\211\005\034\006\023\007\003\010" +
    "\033\011\007\012\027\013\026\023\024\027\017\030\016" +
    "\001\001\000\002\001\001\000\026\005\040\006\023\007" +
    "\003\010\033\011\007\012\027\013\026\023\024\027\017" +
    "\030\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\225\017\053\020\050" +
    "\021\042\022\046\030\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Lexico(new InputStreamReader(System.in),sf),sf);
		else
			parser_obj=new parser(new Lexico(new InputStreamReader(new java.io.FileInputStream(args[0])),sf),sf);

		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
        Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Util.analisisSemantico(ts,root);
		if(Util.total_errores == 0){
            Generador.setTablaSimbolos(ts);
            String archivoSalida = "ejemplo_generado/salida.tm";
            if(args.length > 0) {
                String archivoFuente = args[0];
                archivoSalida = archivoFuente.replace(".tny", ".tm").replace("ejemplo_fuente", "ejemplo_generado");
            }
            Generador.generarCodigoObjeto(root, archivoSalida);
		}
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= all_stmts 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 1");
				            ast = s;
				           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // all_stmts ::= stmt_seq 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 13a");
                           		RESULT=s;
                           	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("all_stmts",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // all_stmts ::= decl_seq stmt_seq 
            {
              NodoBase RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 13b");
                                  NodoBase hijoActual = d;
                                  if(hijoActual !=null){
                                  while(hijoActual.TieneHermano()){
                                  		hijoActual = hijoActual.getHermanoDerecha();
                                    }
                                    hijoActual.setHermanoDerecha(s);
                                    RESULT=d;
                                  }else{
                                  	RESULT=s;
                                  }
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("all_stmts",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_seq ::= decl_seq decl_stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 14a");
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(d);
							RESULT=ini;
						}else{
							RESULT=d;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_seq",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_seq ::= decl_stmt 
            {
              NodoBase RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase d = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 14b");
				RESULT=d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_seq",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl_stmt ::= INT ID SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     if(debug) System.out.println("\t regla 15a");
                            RESULT = new NodoDeclaracion(tipoVar.entero,variable,1);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_stmt ::= INT ID LBRACKET NUM RBRACKET SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String size = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      if(debug) System.out.println("\t regla 15b");
                           RESULT = new NodoDeclaracion(tipoVar.entero,variable,Integer.parseInt(size));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_stmt ::= BOOL ID SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     if(debug) System.out.println("\t regla 15c");
                           RESULT = new NodoDeclaracion(tipoVar.booleano,variable,1);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_stmt ::= BOOL ID LBRACKET NUM RBRACKET SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String size = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      if(debug) System.out.println("\t regla 15d");
                            RESULT = new NodoDeclaracion(tipoVar.booleano,variable,Integer.parseInt(size));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_seq ::= stmt_seq stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 2a");
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3a"); 
					RESULT=sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= repeat_stmt SEMI 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 3b");
						RESULT=srep;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= assign_stmt SEMI 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 3c");
						RESULT=sasi;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= read_stmt SEMI 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 3d");
					RESULT=slec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= write_stmt SEMI 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 3e");
					RESULT=sesc;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3g");
            						RESULT=sfor;
            						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= func_decl 
            {
              NodoBase RESULT =null;
		int sfuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfunc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3j");
            						RESULT=sfunc;
            						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= return_stmt SEMI 
            {
              NodoBase RESULT =null;
		int sretleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sretright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sret = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 3h");
            						RESULT=sret;
            						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= func_call SEMI 
            {
              NodoBase RESULT =null;
		int scallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase scall = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 3i");
            						RESULT=scall;
            						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // for_stmt ::= FOR assign_stmt COMMA exp COMMA assign_stmt LOOP stmt_seq END 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int loopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int loopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase loop = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 16");
							RESULT = new NodoFor(ini, ex, loop, cuerpo);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assign_stmt ::= ID ASSIGN exp 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6a");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assign_stmt ::= ID LBRACKET exp RBRACKET ASSIGN exp 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int despleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int despright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase desp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6b");
             					if(variable!=null)
             					RESULT = new NodoAsignacion(variable.toString(),ex, desp);
             					else{
             					RESULT = null;
             					System.out.println("Ocurrio error en cup # 0001");
             					}
             	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 7a");
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // read_stmt ::= READ ID LBRACKET exp RBRACKET 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int despleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int despright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase desp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 7b");
            					System.out.println("Leyendo Variable");
            					if(variable!=null)
            					RESULT = new NodoLeer(variable.toString(),desp);
            					else{
            					RESULT = null;
            					System.out.println("Ocurrio error en cup # 0002");
            					}
            					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= logic_exp AND logic_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 17a");
            	RESULT = new NodoOperacion(exI,tipoOp.and,exD);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= logic_exp OR logic_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 17b");
                RESULT = new NodoOperacion(exI,tipoOp.or,exD);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= NOT logic_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 17c");
                 RESULT = new NodoOperacion(ex,tipoOp.not,new NodoValor(0));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= logic_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 17d");
                  RESULT = ex;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logic_exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9a");
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // logic_exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logic_exp ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9d");
        							RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
        							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logic_exp ::= simple_exp LE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9e");
        							RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
        							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logic_exp ::= simple_exp GE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9f");
        							RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
        							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logic_exp ::= simple_exp NE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9g");
        							RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
        							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logic_exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9c"); 
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10c"); 
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= term MOD factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11d");
        						RESULT = new NodoOperacion(exI,tipoOp.mod,exD);
        						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11c"); 
					RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 12a"); 
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor));
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= ID LBRACKET exp RBRACKET 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 12e");
        					if(variable!=null){
        						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
        						RESULT= new NodoIdentificador(variable.toString(), ex);
        					}else{
        						RESULT = null;
        						System.out.println("Ocurrio error en cup # 0005");
        					}
        					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= func_call 
            {
              NodoBase RESULT =null;
		int fcallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fcall = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12f"); 
					RESULT=fcall;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // func_seq ::= func_seq func_decl 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18a");
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(f);
							RESULT=ini;
						}else{
							RESULT=f;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_seq",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // func_seq ::= func_decl 
            {
              NodoBase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase f = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 18b"); 
				RESULT=f;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_seq",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // func_decl ::= FUNC ID LPAREN param_list RPAREN all_stmts END 
            {
              NodoBase RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase params = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase body = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 19a");
                   RESULT = new NodoFuncion(name, params, body);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // func_decl ::= FUNC ID LPAREN RPAREN all_stmts END 
            {
              NodoBase RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase body = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 19b");
                   RESULT = new NodoFuncion(name, null, body);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // param_list ::= param_seq 
            {
              NodoBase RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 20a");
				RESULT=p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // param_seq ::= param_seq COMMA INT ID 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 21a");
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(new NodoDeclaracion(tipoVar.entero, param, 1));
							RESULT=ini;
						}else{
							RESULT=new NodoDeclaracion(tipoVar.entero, param, 1);
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // param_seq ::= param_seq COMMA BOOL ID 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 21b");
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(new NodoDeclaracion(tipoVar.booleano, param, 1));
							RESULT=ini;
						}else{
							RESULT=new NodoDeclaracion(tipoVar.booleano, param, 1);
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // param_seq ::= INT ID 
            {
              NodoBase RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 21c"); 
				RESULT=new NodoDeclaracion(tipoVar.entero, param, 1);				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // param_seq ::= BOOL ID 
            {
              NodoBase RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 21d"); 
				RESULT=new NodoDeclaracion(tipoVar.booleano, param, 1);				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // return_stmt ::= RETURN exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 22");
					RESULT = new NodoReturn(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // func_call ::= ID LPAREN arg_list RPAREN 
            {
              NodoBase RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 23a");
					RESULT = new NodoLlamadaFuncion(name, args);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // func_call ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 23b");
					RESULT = new NodoLlamadaFuncion(name, null);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arg_list ::= arg_seq 
            {
              NodoBase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase a = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 24a");
				RESULT=a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arg_seq ::= arg_seq COMMA exp 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 25a");
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(arg);
							RESULT=ini;
						}else{
							RESULT=arg;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_seq",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arg_seq ::= exp 
            {
              NodoBase RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 25b"); 
				RESULT=arg;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_seq",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
